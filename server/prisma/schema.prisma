// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ContentType {
  MOVIE
  SERIES
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  avatar      String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // User interactions
  watchHistory WatchHistory[]
  favorites    Favorite[]
  playlists    Playlist[]
  reviews      Review[]

  @@map("users")
}

model Movie {
  id          String        @id @default(cuid())
  title       String
  description String
  duration    Int           // in minutes
  releaseYear Int
  genres      String[]      // Array of genre strings
  director    String
  cast        String[]      // Array of cast member names
  poster      String?       // Poster image URL
  backdrop    String?       // Backdrop image URL
  trailerUrl  String?       // YouTube or video URL
  videoUrl    String?       // Main video file URL
  rating      Float?        @default(0)
  viewCount   Int           @default(0)
  status      ContentStatus @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  watchHistory WatchHistory[]
  favorites    Favorite[]
  reviews      Review[]

  @@map("movies")
}

model Series {
  id          String        @id @default(cuid())
  title       String
  description String
  releaseYear Int
  genres      String[]
  director    String
  cast        String[]
  poster      String?
  backdrop    String?
  trailerUrl  String?
  rating      Float?        @default(0)
  viewCount   Int           @default(0)
  status      ContentStatus @default(DRAFT)
  totalSeasons Int          @default(1)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  seasons      Season[]
  watchHistory WatchHistory[]
  favorites    Favorite[]
  reviews      Review[]

  @@map("series")
}

model Season {
  id           String   @id @default(cuid())
  seriesId     String
  seasonNumber Int
  title        String
  description  String?
  poster       String?
  releaseDate  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  series   Series    @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  episodes Episode[]

  @@unique([seriesId, seasonNumber])
  @@map("seasons")
}

model Episode {
  id            String   @id @default(cuid())
  seasonId      String
  episodeNumber Int
  title         String
  description   String
  duration      Int      // in minutes
  videoUrl      String?
  thumbnail     String?
  airDate       DateTime?
  viewCount     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  season       Season         @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  watchHistory WatchHistory[]

  @@unique([seasonId, episodeNumber])
  @@map("episodes")
}

model WatchHistory {
  id          String   @id @default(cuid())
  userId      String
  contentType ContentType
  movieId     String?
  seriesId    String?
  episodeId   String?
  progress    Int      @default(0) // Progress in seconds
  completed   Boolean  @default(false)
  watchedAt   DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie   Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  series  Series?  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  episode Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@map("watch_history")
}

model Favorite {
  id          String      @id @default(cuid())
  userId      String
  contentType ContentType
  movieId     String?
  seriesId    String?
  createdAt   DateTime    @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie  Movie?  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  series Series? @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@unique([userId, seriesId])
  @@map("favorites")
}

model Playlist {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(false)
  poster      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items PlaylistItem[]

  @@map("playlists")
}

model PlaylistItem {
  id          String      @id @default(cuid())
  playlistId  String
  contentType ContentType
  movieId     String?
  seriesId    String?
  order       Int         @default(0)
  addedAt     DateTime    @default(now())

  // Relations
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@map("playlist_items")
}

model Review {
  id          String      @id @default(cuid())
  userId      String
  contentType ContentType
  movieId     String?
  seriesId    String?
  rating      Int         // 1-5 stars
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie  Movie?  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  series Series? @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@unique([userId, seriesId])
  @@map("reviews")
}
